definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "lua_${generator.prefix}_${class_name}_${func_name}_i"
  sfunction: "lua_${generator.prefix}_${class_name}_${func_name}_s"
  constructor: "lua_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  # '@' prefix means we will use regular expression
  native_types:
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"
    "@std::map<std::basic_string.*,\\s*std::basic_string.*>": "std::map<std::string, std::string>"
  ns_map:
    "": ""

  to_native:
    # lua to native
    int: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, (int *)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned int": "ok &= GetValueFromLua(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned char": "ok &= GetValueFromLua(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    short: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned short": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    char: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    bool: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    float: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    double: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    long: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    ssize_t: "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned long": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "long long": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "std::string": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "char*": "std::string ${out_value}_tmp; ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}_tmp, \"${lua_namespaced_class_name}:${func_name}\"); ${out_value} = ${out_value}_tmp.c_str()"
    "CVec2": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "CVec3": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "CVec4": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "CColor": "ok &=GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "kmMat4": "ok &= GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@map<.*>" : "GetValueFromLua(tolua_S, ${arg_idx}, &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    object: "ok &= luaval_to_object<${arg.to_string($generator).replace(\"*\", \"\")}>(tolua_S, ${arg_idx}, \"${scriptname}\",&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
  
  from_native:
    # native to lua
    int: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "unsigned int": "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "unsigned short": "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "unsigned char": "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    short: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    char: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "long long": "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "std::string": "SendValueToLua(tolua_S,${in_value})"
    "char*": "SendValueToLua(tolua_S,(const char*)${in_value})"
    bool: "SendValueToLua(tolua_S,(bool)${in_value})"
    float: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    double: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    long: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    ssize_t: "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "unsigned long": "SendValueToLua(tolua_S,(lua_Number)${in_value})"
    "CVec2": "SendValueToLua(tolua_S, ${in_value})"
    "CVec3": "SendValueToLua(tolua_S, ${in_value})"
    "CVec4": "SendValueToLua(tolua_S, ${in_value})"
    "CColor": "SendValueToLua(tolua_S, ${in_value})"
    "kmMat4": "SendValueToLua(tolua_S, ${in_value})"
    "@vector<.*>" : "SendValueToLua(tolua_S, ${in_value})"
    "@map<.*>" : "SendValueToLua(tolua_S, ${in_value})"
    object: "object_to_luaval<${ntype.replace(\"*\", \"\").replace(\"const \", \"\")}>(tolua_S, \"${scriptname}\",(${ntype.replace(\"const \", \"\")})${in_value})"

