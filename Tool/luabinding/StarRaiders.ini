[StarRaiders]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = StarRaiders

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace =

android_headers = -I%(androidndkdir)s/sources/android/native_app_glue -I%(androidndkdir)s/sources/android/ndk_helper -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.3/include 
clang_flags = -nostdinc -x c++ -std=c++11

BeyondEngine_headers = -include stdafx.h -I%(BeyondEngineDir)s/GameProject/StarRaiders/SourceCode -I%(BeyondEngineDir)s/SourceCode -I%(BeyondEngineDir)s/SourceCode/Platform -I%(BeyondEngineDir)s/SourceCode/Platform/android -I%(BeyondEngineDir)s/Include/freetype2/include/android -I%(BeyondEngineDir)s/Include/jpeg/include/android -I%(BeyondEngineDir)s/Include/png/include/android -I%(BeyondEngineDir)s/Include/tiff/include/android -I%(BeyondEngineDir)s/Include/webp/include/android -I%(BeyondEngineDir)s/SourceCode/Utility -I%(BeyondEngineDir)s/SourceCode/Utility/BeatsUtility/Platform -I%(BeyondEngineDir)s/SourceCode/Utility/BeatsUtility/Platform/android -I%(BeyondEngineDir)s/SourceCode/Platform -I%(BeyondEngineDir)s/SourceCode/Platform/android -I%(BeyondEngineDir)s/Include/asio -I%(BeyondEngineDir)s/Include/msgpack -I%(BeyondEngineDir)s/Include/rapidjson -I%(BeyondEngineDir)s/Include/openssl/include -I%(BeyondEngineDir)s/Include/MP3Decoder/include -I%(BeyondEngineDir)s/Include/OggDecoder/include -I%(BeyondEngineDir)s/Include/OpenalSoft/include -I%(BeyondEngineDir)s/Include/lua -I%(BeyondEngineDir)s/Include/glm -I%(BeyondEngineDir)s/SourceCode/BeyondEngineUI -I%(BeyondEngineDir)s/Include/lua/Include

BeyondEngine_flags = -DANDROID -U_WIN32

cxxgenerator_headers = 

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(BeyondEngine_headers)s %(android_flags)s %(clang_flags)s %(BeyondEngine_flags)s %(extra_flags)s

# what headers to parse
headerpath = %(BeyondEngineDir)s/GameProject/StarRaiders/SourceCode/
headers = BeyondEngineUI/CostButton.h BeyondEngineUI/ArrowTip.h GameConfigs/LanguageTextConfig.h StarRaidersCenter.h GameObject/Player.h GameConfig.h BeyondEngineUI/NoticeMessageManager.h BeyondEngineUI/ClipPorgressBar.h Scene/UniverseScene.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = CCostButton CArrowTip CStarRaidersCenter CPlayer CGameConfig CNoticeMessageManager CClipPorgressBar CUniverseScene CLanguageTextConfig

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = CPlayer::[SetGuildID SetUniqueId GetGuildID StartReturnToAustraliaActivity TeamKickMember GetUniqueId SendGuildInfoMsg GetLandingShipInfo GetLandingShipInfo GetTeamActivityRecordInfo SaveTeamActivityInfo SaveCreateTeamActivityInfo GetUnserializeGuildSummary SaveJoinTeamActivityInfo OnIslandMessage UnSerialize UnSerializePVE UnSerializePVP UnSerializeBattleLog UnSerializeBuilding UnSerializeActivityInfo UnserializeUniverse UnserializeMission UnserializeGuildRank UnserializeGuildInfo UnserializeVIPInfo UnserializeGuildSummary OnActivityCombatStart],
        CStarRaidersCenter::[GetCurrentVolumePercent SyncPlayerInfo GetEndpoint GetEquipmentFrag],
		CUniverseScene::[RefreshUIForPlayerInfoList GetAchievementTable],
		CCostButton::[SetResouecIcon],
        CGameConfig::[GetAchievementTable GetCarnivalTable GetHPFineForBuildingFrag GetHPDangerForBuildingFrag GetHPFineForSoldierFrag GetHPCautionForSoldierFrag GetHPDangerForSoldierFrag]
		
        

rename_functions = 

rename_classes = 

# for all class names, should we remove something when registering in the target VM?
remove_prefix = 

# classes for which there will be no "parent" lookup
classes_have_no_parents = 

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = 

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = yes

